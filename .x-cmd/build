# shellcheck shell=bash disable=SC1091,SC2034,SC2002 #xsh

# Section: Arg
xrc ui
WORK_DIR="$(x wsroot)"
COMMIT_ID="$(git rev-parse --short HEAD)"
BRANCH_INFO="$(git symbolic-ref -q --short HEAD 2> /dev/null || git describe --tags --exact-match 2> /dev/null)"
DIST_PATH=$WORK_DIR/dist
TEMPLATE_PATH=$WORK_DIR/templates
PACKAGE_VERSION=template-${BRANCH_INFO}-${COMMIT_ID}
DOC_SEARCH_CONFIG_FILE=$WORK_DIR/blog/.vuepress/configs/docSearch/docSearchConfig.json
WEB_SIT="www.qbenben.com"
# EndSection

# Section: Function
build_doc() {
	if [ -d "$TEMPLATE_PATH/$PACKAGE_VERSION" ];then
		cd "$TEMPLATE_PATH" &&
		rm -rf "${PACKAGE_VERSION}"* &&
		cd "$WORK_DIR" || exit
	fi
	rm -rf "$DIST_PATH"
	yarn docs:build &&
	mkdir -p "$TEMPLATE_PATH" &&
	cp -r "$DIST_PATH" "$TEMPLATE_PATH/${PACKAGE_VERSION}" &&
	cd "$TEMPLATE_PATH" &&
	zip -r "${PACKAGE_VERSION}.zip" "${PACKAGE_VERSION}" > /dev/null &&
	if [ -f "$TEMPLATE_PATH/$PACKAGE_VERSION.zip" ];then
		package_size="$(du -sh "$PACKAGE_VERSION" | awk '{ printf $1 }')"
		printf "%s\n%s\n%s\n%s\n%s\n%s\n" \
		"$(ui bold blue '----------------------------------------------------')"\
		"$(ui bold green '🎉 Packaged successfully! 🎉')" \
		"📦 The package version is $(ui bold cyan "$PACKAGE_VERSION")" \
		"💼 The package address is $(ui bold yellow  underline "$TEMPLATE_PATH")" \
		"📐 The package size is $(ui bold magenta "$package_size")" \
		"$(ui bold blue '----------------------------------------------------')"
	fi
	cd "$WORK_DIR" || exit
}

clean_plugin() {
	lerna run clean
}

build_plugin() {
  	lerna run build && lerna bootstrap
}
###
  # 运行docSearch docker建立搜索索引
  # 根目录需建立.env文件：https://www.algolia.com/apps/CXZ8IP0O5G/api-keys/all
  # APPLICATION_ID=your APPLICATION_ID
  # API_KEY=your API_KEY
###
build_docSearch() {
	local env_file_path="$WORK_DIR/.env"
  	[ ! -f "$env_file_path" ] && echo 'APPLICATION_ID=your_algolia_application_id' >> "$env_file_path" && echo 'APPLICATION_ID=your_algolia_api_key' >> "$env_file_path" && return
	docker run -it --env-file=.env -e "CONFIG=$(cat "${DOC_SEARCH_CONFIG_FILE}" | x jq -r tostring)" algolia/docsearch-scraper
}

build_baiduCollect() {
	local BAIDU_TOKEN
	BAIDU_TOKEN="$(cat "$WORK_DIR/.env" | grep 'BAIDU_TOKEN')"
	local TOKEN="${BAIDU_TOKEN#*=}"
	[ -z "$TOKEN" ] && return 0
	curl -H 'Content-Type:text/plain' --data-binary @urls.txt "http://data.zz.baidu.com/urls?site=$WEB_SIT&token=$TOKEN"
}

build_theme() {
  	cd "$WORK_DIR/vuepress-theme-gungnir/packages/theme/" &&
	yarn clean &&
	yarn build &&
	yarn copy &&
	cp -r "$WORK_DIR/vuepress-theme-gungnir/packages/theme/lib" "$WORK_DIR/node_modules/vuepress-theme-gungnir"
	cd "$WORK_DIR" || exit
}
# EndSection

# Section: Main
case "${1}" in
	plugin) 								build_plugin 																	;;
	clean) 									clean_plugin 																	;;
	theme) 									build_theme																		;;
	search|docSearch)				build_docSearch && build_baiduCollect 				;;
	doc|*)									build_doc																			;;
esac
# EndSection

# Section: Advise
if ___x_cmd_is_suitable_advise_env; then
    x advise rm "build"
    advise "build" - <<A
{
    "plugin": "--- build the plugin And link node_modules",
    "clean": "--- clean plugins build file",
    "theme": "--- build the theme And link node_modules",
    "search": "--- build the algolia document search index",
    "doc": "--- build the doc",
}
A
fi
# EndSection